from fastapi import FastAPI
from typing import List
from pydantic import BaseModel, Field, Optional, constr, condecimal
import uuid
import random
from enum import Enum
from datetime import datetime, timedelta
import string
from decimal import Decimal






class PaymentStatus(str, Enum):
    pending = "pending"
    confirmed = "confirmed"
    failed = "failed"


class Payments(BaseModel):
    id: uuid.UUID
    user_id: str
    amount: Decimal
    currency: str
    payment_id: uuid.UUID
    payment_reference: uuid.UUID
    payment_status: PaymentStatus
    transaction_reference: uuid.UUID
    description: Optional[str]= None
    timestamp: datetime = Field(default_factory=datetime.utcnow)


class PaymentResponse(BaseModel):
    payment: Payments
    status: PaymentStatus
    message: Optional[str]= None



class CardPaymentRequest(BaseModel):
    user_id: uuid.UUID
    amount: Decimal
    currency: str
    customer_name: str
    card_number: str = Field(..., min_length=16, max_length=19, regex=r'^\d{16,19}$')
    card_expiry: str = Field(..., min_length= 3, max_length=5, regex=r'^\/d{0[1-9]2[2-6]}$')
    cvv: str = Field(..., min_length=3, max_length=4, regex=r'^\d{3,4}$')
    status: PaymentStatus
    transaction_reference: uuid.UUID


class CardPaymentResponse(BaseModel):
    card_payment_id: uuid.UUID
    status: PaymentStatus
    timestamp: datetime.utcnow

def process_payment(payment_request: CardPaymentRequest) -> CardPaymentResponse:
    card_payment_id = uuid.uuid4()
    status = PaymentStatus.confirmed 
    timestamp = datetime.utcnow()
    
    return CardPaymentResponse(
        card_payment_id=card_payment_id,
        status=status,
        timestamp=timestamp
    )


class UssdPaymentRequest(BaseModel):
    session_id: str
    phone_number: str
    text: str


class SmsRequest(BaseModel):
    session_id: str
    message:str


class BankAccountRequest(BaseModel):
    account_id: uuid.UUID
    account_name: str
    account_number: str = Field(...,min_length=10, max_length=10)
    bank_name: str
    amount: Decimal
    currency: str
    status: PaymentStatus
    created_at: datetime = Field(default_factory=datetime.utcnow)

def generate_account_number(length: int = 10) -> str:
    return ''.join(random.choices(string.digits, k=length))

TRANSFER_TIMEOUT = timedelta(minutes=30)



